apiVersion: v1
kind: Secret
metadata:
  name: overlay-testing-pipeline
  namespace: tap-install
type: Opaque
stringData:
  patch2.yml: |
    #@ load("@ytt:overlay", "overlay")
    #@overlay/match by=overlay.subset({"kind":"ClusterSourceTemplate", "metadata": {"name":"testing-pipeline"}}),expects="1+"
    ---
    #@overlay/match missing_ok=True
    metadata:
      #@overlay/match missing_ok=True
      annotations:
        #@overlay/match missing_ok=True
        tampered-by: gevans
    spec:
      #@overlay/match missing_ok=True
      ytt: |
        #@ load("@ytt:data", "data")

        #@ def merge_labels(fixed_values):
        #@   labels = {}
        #@   if hasattr(data.values.workload.metadata, "labels"):
        #@     exclusions = ["kapp.k14s.io/app", "kapp.k14s.io/association"]
        #@     for k,v in dict(data.values.workload.metadata.labels).items():
        #@       if k not in exclusions:
        #@         labels[k] = v
        #@       end
        #@     end
        #@   end
        #@   labels.update(fixed_values)
        #@   return labels
        #@ end

        #@ def merged_tekton_params():
        #@   params = []
        #@   if hasattr(data.values, "params") and hasattr(data.values.params, "testing_pipeline_params"):
        #@     for param in data.values.params["testing_pipeline_params"]:
        #@       params.append({ "name": param, "value": data.values.params["testing_pipeline_params"][param] })
        #@     end
        #@   end
        #@   params.append({ "name": "source-url", "value": data.values.source.url })
        #@   params.append({ "name": "source-revision", "value": data.values.source.revision })
        #@   if hasattr(data.values.workload.spec.source, "subPath"):
        #@     params.append({ "name": "sub-path", "value": data.values.workload.spec.source.subPath })
        #@   end
        #@   return params
        #@ end
        ---
        apiVersion: carto.run/v1alpha1
        kind: Runnable
        metadata:
          name: #@ data.values.workload.metadata.name
          labels: #@ merge_labels({ "app.kubernetes.io/component": "test" })
        spec:
          #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
          serviceAccountName: #@ data.values.workload.spec.serviceAccountName

          runTemplateRef:
            name: tekton-source-pipelinerun
            kind: ClusterRunTemplate

          selector:
            resource:
              apiVersion: tekton.dev/v1beta1
              kind: Pipeline

            #@ not hasattr(data.values, "testing_pipeline_matching_labels") or fail("testing_pipeline_matching_labels param is required")
            matchingLabels: #@ data.values.params["testing_pipeline_matching_labels"] or fail("testing_pipeline_matching_labels param cannot be empty")

          inputs: 
            tekton-params: #@ merged_tekton_params()
